To achieve this in a Spring Boot application, you can use the AWS SDK for Java to interact with S3, and Apache Commons IO along with GZIPInputStream to handle the gzip compression. Here's a simplified exam
Add dependencies to your pom.xml:

<dependencies>
    <!-- Spring Boot Starter Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- AWS SDK for Java -->
    <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>aws-sdk-s3</artifactId>
    </dependency>

    <!-- Apache Commons IO -->
    <dependency>
        <groupId>commons-io</groupId>
        <artifactId>commons-io</artifactId>
    </dependency>
</dependencies>


Create a service to interact with S3 and handle the gzip file:

import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.GetObjectRequest;
import org.apache.commons.io.IOUtils;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.zip.GZIPInputStream;

@Service
public class S3Service {

    private final S3Client s3Client;
    private final String bucketName;

    @Autowired
    public S3Service(S3Client s3Client, @Value("${aws.s3.bucketName}") String bucketName) {
        this.s3Client = s3Client;
        this.bucketName = bucketName;
    }

    public String readGzipFile(String key) throws IOException {
        GetObjectRequest getObjectRequest = GetObjectRequest.builder()
                .bucket(bucketName)
                .key(key)
                .build();

        try (S3Object s3Object = s3Client.getObject(getObjectRequest);
             GZIPInputStream gzipInputStream = new GZIPInputStream(s3Object.getObjectContent());
             BufferedReader reader = new BufferedReader(new InputStreamReader(gzipInputStream))) {

            return IOUtils.toString(reader);
        }
    }
}


Create a controller to expose a REST API endpoint:

@RestController
@RequestMapping("/api")
public class S3Controller {

    private final S3Service s3Service;

    @Autowired
    public S3Controller(S3Service s3Service) {
        this.s3Service = s3Service;
    }

    @GetMapping("/read-gzip-file")
    public ResponseEntity<String> readGzipFile(@RequestParam String key) {
        try {
            String content = s3Service.readGzipFile(key);
            return ResponseEntity.ok(content);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error reading file: " + e.getMessage());
        }
    }
}

2) New ex:- 
Service class :-
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.GetObjectRequest;
import software.amazon.awssdk.services.s3.model.S3Object;
import software.amazon.awssdk.services.s3.model.S3ObjectInputStream;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.zip.GZIPInputStream;

@Service
public class S3Service {

    @Value("${aws.s3.bucketName}")
    private String bucketName;

    @Value("${aws.s3.key}")
    private String key;

    public String readAndParseS3Object() throws IOException {
        S3Client s3Client = S3Client.builder()
                .region(Region.US_EAST_1) // Replace with your desired AWS region
                .credentialsProvider(DefaultCredentialsProvider.create())
                .build();

        GetObjectRequest getObjectRequest = GetObjectRequest.builder()
                .bucket(bucketName)
                .key(key)
                .build();

        S3Object s3Object = s3Client.getObject(getObjectRequest);
        S3ObjectInputStream objectInputStream = s3Object.getObjectContent();

        // Unzip the gz file
        GZIPInputStream gzipInputStream = new GZIPInputStream(objectInputStream);

        // Read the unzipped content
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len;
        while ((len = gzipInputStream.read(buffer)) != -1) {
            byteArrayOutputStream.write(buffer, 0, len);
        }

        String unzippedContent = byteArrayOutputStream.toString("UTF-8");

        // Parse the JSON content
        // Assuming you are using Jackson for JSON parsing
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(unzippedContent);

        // Further processing or return the JSON object
        return jsonNode.toString();
    }
}

controller :-
@RestController
public class MyController {

    @Autowired
    private S3Service s3Service;

    @GetMapping("/read-s3-object")
    public ResponseEntity<String> readS3Object() {
        try {
            String jsonContent = s3Service.readAndParseS3Object();
            return ResponseEntity.ok(jsonContent);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
}

ex : 3
controller :-
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.io.IOException;

@RestController
@RequestMapping("/s3")
public class S3Controller {

    @Autowired
    private S3Service s3Service;

    @GetMapping("/readAndParse/{bucketName}/{key}")
    public String readAndParseS3File(@PathVariable String bucketName, @PathVariable String key) throws IOException {
        return s3Service.readAndParseS3File(bucketName, key);
    }
}

service :-
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.S3Object;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.zip.GZIPInputStream;

@Service
public class S3Service {

    @Autowired
    private AmazonS3 amazonS3;

    public String readAndParseS3File(String bucketName, String key) throws IOException {
        S3Object s3Object = amazonS3.getObject(bucketName, key);

        try (GZIPInputStream gzipInputStream = new GZIPInputStream(s3Object.getObjectContent());
             InputStreamReader inputStreamReader = new InputStreamReader(gzipInputStream);
             BufferedReader reader = new BufferedReader(inputStreamReader)) {

            StringBuilder content = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                content.append(line);
            }

            // Parse the content to a JSON object (You may use a JSON library like Jackson or Gson)
            // For example, using Jackson:
            // ObjectMapper objectMapper = new ObjectMapper();
            // YourObject yourObject = objectMapper.readValue(content.toString(), YourObject.class);

            return content.toString();
        }
    }
}

