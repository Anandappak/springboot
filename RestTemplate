Rest template post api
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

public class MyApiClient {

    public void callApi(String apiUrl, String username, String password) {
        // Create a RestTemplate instance
        RestTemplate restTemplate = new RestTemplate();
        
        // Set up the request body
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        String requestBody = "{\"username\":\"" + username + "\", \"password\":\"" + password + "\"}";
        HttpEntity<String> request = new HttpEntity<>(requestBody, headers);

        // Make the POST request
        ResponseEntity<String> response = restTemplate.postForEntity(apiUrl, request, String.class);

        // Handle the response
        if (response.getStatusCode().is2xxSuccessful()) {
            String responseBody = response.getBody();
            // Process the response body
            System.out.println("Response from API: " + responseBody);
        } else {
            // Handle error response
            System.err.println("Error response from API: " + response.getStatusCode());
        }
    }
}

post api file
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;

public class FileUploadClient {

    public void uploadFiles(String apiUrl, Path file1Path, Path file2Path,token) throws IOException {
        // Create RestTemplate instance
        RestTemplate restTemplate = new RestTemplate();

        // Prepare files as resources
        ByteArrayResource file1Resource = new ByteArrayResource(Files.readAllBytes(file1Path)) {
            @Override
            public String getFilename() {
                return file1Path.getFileName().toString();
            }
        };

        ByteArrayResource file2Resource = new ByteArrayResource(Files.readAllBytes(file2Path)) {
            @Override
            public String getFilename() {
                return file2Path.getFileName().toString();
            }
        };

        // Populate the form data
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("file1", file1Resource);
        body.add("file2", file2Resource);

        // Set up headers
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        headers.setBearerAuth(token)
        // Create the request entity
        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        // Send the POST request
        ResponseEntity<String> response = restTemplate.postForEntity(apiUrl, requestEntity, String.class);

        // Handle the response
        if (response.getStatusCode().is2xxSuccessful()) {
            String responseBody = response.getBody();
            // Process the response body
            System.out.println("Response from API: " + responseBody);
        } else {
            // Handle error response
            System.err.println("Error response from API: " + response.getStatusCode());
        }
    }
}
costome ssl certificate enable
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.*;
import java.io.FileInputStream;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

public class CustomRestTemplate {

    public RestTemplate createRestTemplate() throws Exception {
        // Load server key store
        KeyStore keyStore = KeyStore.getInstance("PKCS12");
        InputStream keyStoreInputStream = new FileInputStream("server.key");
        keyStore.load(keyStoreInputStream, "keystore_password".toCharArray());

        // Load CA certificate
        KeyStore caKeyStore = KeyStore.getInstance("JKS");
        InputStream caInputStream = new FileInputStream("ca_certificate.crt");
        caKeyStore.load(caInputStream, "ca_keystore_password".toCharArray());

        // Set up SSL context with server key and CA certificate
        SSLContext sslContext = SSLContext.getInstance("TLS");
        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        keyManagerFactory.init(keyStore, "keystore_password".toCharArray());
        trustManagerFactory.init(caKeyStore);

        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);

        // Configure RestTemplate to use SSL context
        SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslContext);
        CloseableHttpClient httpClient = HttpClients.custom()
                .setSSLSocketFactory(socketFactory)
                .build();

        ClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);

        return new RestTemplateBuilder()
                .requestFactory(() -> requestFactory)
                .build();
    }
}
