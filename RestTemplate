Rest template post api
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

public class MyApiClient {

    public void callApi(String apiUrl, String username, String password) {
        // Create a RestTemplate instance
        RestTemplate restTemplate = new RestTemplate();
        
        // Set up the request body
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        String requestBody = "{\"username\":\"" + username + "\", \"password\":\"" + password + "\"}";
        HttpEntity<String> request = new HttpEntity<>(requestBody, headers);

        // Make the POST request
        ResponseEntity<String> response = restTemplate.postForEntity(apiUrl, request, String.class);

        // Handle the response
        if (response.getStatusCode().is2xxSuccessful()) {
            String responseBody = response.getBody();
            // Process the response body
            System.out.println("Response from API: " + responseBody);
        } else {
            // Handle error response
            System.err.println("Error response from API: " + response.getStatusCode());
        }
    }
}

post api file
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;

public class FileUploadClient {

    public void uploadFiles(String apiUrl, Path file1Path, Path file2Path,token) throws IOException {
        // Create RestTemplate instance
        RestTemplate restTemplate = new RestTemplate();

        // Prepare files as resources
        ByteArrayResource file1Resource = new ByteArrayResource(Files.readAllBytes(file1Path)) {
            @Override
            public String getFilename() {
                return file1Path.getFileName().toString();
            }
        };

        ByteArrayResource file2Resource = new ByteArrayResource(Files.readAllBytes(file2Path)) {
            @Override
            public String getFilename() {
                return file2Path.getFileName().toString();
            }
        };

        // Populate the form data
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("file1", file1Resource);
        body.add("file2", file2Resource);

        // Set up headers
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        headers.setBearerAuth(token)
        // Create the request entity
        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        // Send the POST request
        ResponseEntity<String> response = restTemplate.postForEntity(apiUrl, requestEntity, String.class);

        // Handle the response
        if (response.getStatusCode().is2xxSuccessful()) {
            String responseBody = response.getBody();
            // Process the response body
            System.out.println("Response from API: " + responseBody);
        } else {
            // Handle error response
            System.err.println("Error response from API: " + response.getStatusCode());
        }
    }
}
costome ssl certificate enable
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.*;
import java.io.FileInputStream;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

public class CustomRestTemplate {

    public RestTemplate createRestTemplate() throws Exception {
        // Load server key store
        KeyStore keyStore = KeyStore.getInstance("PKCS12");
        InputStream keyStoreInputStream = new FileInputStream("server.key");
        keyStore.load(keyStoreInputStream, "keystore_password".toCharArray());

        // Load CA certificate
        KeyStore caKeyStore = KeyStore.getInstance("JKS");
        InputStream caInputStream = new FileInputStream("ca_certificate.crt");
        caKeyStore.load(caInputStream, "ca_keystore_password".toCharArray());

        // Set up SSL context with server key and CA certificate
        SSLContext sslContext = SSLContext.getInstance("TLS");
        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        keyManagerFactory.init(keyStore, "keystore_password".toCharArray());
        trustManagerFactory.init(caKeyStore);

        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);

        // Configure RestTemplate to use SSL context
        SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslContext);
        CloseableHttpClient httpClient = HttpClients.custom()
                .setSSLSocketFactory(socketFactory)
                .build();

        ClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);

        return new RestTemplateBuilder()
                .requestFactory(() -> requestFactory)
                .build();
    }
}
2)Custome ssl config restTemplate
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import java.io.FileInputStream;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.SecureRandom;

public class MyRestTemplateFactory {

    public RestTemplate createRestTemplate() throws Exception {
        // Load CA certificate
        InputStream caInput = new FileInputStream("path_to_ca_certificate");
        KeyStore caKeyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        caKeyStore.load(caInput, "ca_password".toCharArray());

        // Load server key
        InputStream keyInput = new FileInputStream("path_to_server_key");
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(keyInput, "key_password".toCharArray());

        // Load server certificate
        InputStream certInput = new FileInputStream("path_to_server_certificate");
        KeyStore certKeyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        certKeyStore.load(certInput, "cert_password".toCharArray());

        // Initialize trust manager factory with CA certificate
        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(caKeyStore);

        // Initialize key manager factory with server key and certificate
        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        kmf.init(keyStore, "key_password".toCharArray());

        // Initialize SSL context
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), new SecureRandom());

        // Configure HttpClient with SSL context
        ClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(HttpClients.custom().setSSLContext(sslContext).build());

        // Create RestTemplate with configured request factory
        return new RestTemplate(requestFactory);
    }
}

3) Configure level ssl resttemplate 
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.apache.http.ssl.SSLContexts;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;

import java.io.FileInputStream;
import java.security.KeyStore;

@Configuration
public class RestClientConfiguration {

    @Bean
    public RestTemplate restTemplate() throws Exception {
        return new RestTemplate(clientHttpRequestFactory());
    }

    private ClientHttpRequestFactory clientHttpRequestFactory() throws Exception {
        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory();
        factory.setHttpClient(httpClient());
        return factory;
    }

    private CloseableHttpClient httpClient() throws Exception {
        SSLContextBuilder sslContextBuilder = SSLContexts.custom()
                .loadTrustMaterial(new FileInputStream("path_to_ca_certificate"), new TrustSelfSignedStrategy())
                .loadKeyMaterial(new FileInputStream("path_to_server_key"), "password".toCharArray(), "password".toCharArray());

        SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(
                sslContextBuilder.build(),
                new String[]{"TLSv1.2"},
                null,
                SSLConnectionSocketFactory.getDefaultHostnameVerifier());

        return HttpClients.custom()
                .setSSLSocketFactory(socketFactory)
                .build();
    }
}
