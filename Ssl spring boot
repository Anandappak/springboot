start 
import java.io.FileInputStream;
import java.io.InputStream;
import java.security.KeyStore;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;

public class SSLConfigurationExample {

    public static void main(String[] args) throws Exception {
        // Load keystore
        KeyStore keystore = KeyStore.getInstance("JKS");
        char[] password = "your_keystore_password".toCharArray();
        InputStream keystoreInputStream = new FileInputStream("keystore.jks");
        keystore.load(keystoreInputStream, password);
        
        // Initialize key manager factory
        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        keyManagerFactory.init(keystore, password);
        
        // Initialize trust manager factory
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(keystore);
        
        // Initialize SSL context
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);
        
        // Now you can use this SSL context in your HTTP client/server
        // For example:
        // HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());
    }
}
end




ssl config

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import java.io.FileInputStream;
import java.security.KeyStore;

@Configuration
public class RestClientConfiguration {

    @Bean
    public RestTemplate restTemplate() throws Exception {
        return new RestTemplate(clientHttpRequestFactory());
    }

    private ClientHttpRequestFactory clientHttpRequestFactory() throws Exception {
        return new HttpComponentsClientHttpRequestFactory(httpClient());
    }

    private CloseableHttpClient httpClient() throws Exception {
        // Load the truststore containing the CA certificate
        KeyStore truststore = KeyStore.getInstance(KeyStore.getDefaultType());
        truststore.load(new FileInputStream("path/to/chain-of-truststore.pem"), "truststorePassword".toCharArray());

        // Load the client certificate and private key
        SSLContext sslContext = SSLContexts.custom()
                .loadKeyMaterial(new FileInputStream("path/to/server.key"), "keyPassword".toCharArray(), "keyPassword".toCharArray())
                .loadTrustMaterial(truststore, null)
                .build();

        // Create and return HttpClient with SSL context
        return HttpClients.custom()
                .setSSLContext(sslContext)
                .build();
    }
}

new code test
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.KeyManagerFactory;
import java.security.KeyStore;
import java.security.cert.CertificateFactory;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import org.apache.http.ssl.SSLContextBuilder;

public class MyRestClient {

    public static void main(String[] args) throws Exception {
        MyRestClient myRestClient = new MyRestClient();
        myRestClient.makePostRequest();
    }

    public void makePostRequest() throws Exception {
        RestTemplate restTemplate = getRestTemplate();

        // Replace "https://example.com/api" with your actual API endpoint
        String url = "https://example.com/api";

        // Replace "file_path_to_upload" with the path to the file you want to upload
        String filePath = "file_path_to_upload";

        // Read file content
        byte[] fileContent = readFromFile(filePath);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);

        HttpEntity<byte[]> requestEntity = new HttpEntity<>(fileContent, headers);

        restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);
    }

    private byte[] readFromFile(String filePath) throws Exception {
        InputStream inputStream = new FileInputStream(filePath);
        byte[] fileBytes = inputStream.readAllBytes();
        inputStream.close();
        return fileBytes;
    }

    public RestTemplate getRestTemplate() throws Exception {
        SSLContext sslContext = SSLContextBuilder.create()
            .loadKeyMaterial(loadKeyStore("server.key", "password"), "password".toCharArray())
            .loadTrustMaterial(loadTrustStore("chain-of-cert.pem"), null)
            .build();

        HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();
        requestFactory.setHttpClient(HttpClients.custom().setSSLContext(sslContext).build());

        return new RestTemplate(requestFactory);
    }

    private KeyStore loadKeyStore(String keyStorePath, String password) throws Exception {
        KeyStore keyStore = KeyStore.getInstance("PKCS12");
        InputStream inputStream = new FileInputStream(keyStorePath);
        keyStore.load(inputStream, password.toCharArray());
        return keyStore;
    }

    private KeyStore loadTrustStore(String trustStorePath) throws Exception {
        CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
        trustStore.load(null); // Initialize empty truststore
        try (InputStream inputStream = new FileInputStream(trustStorePath)) {
            Certificate certificate = certFactory.generateCertificate(inputStream);
            trustStore.setCertificateEntry("cert", certificate);
        }
        return trustStore;
    }
}

