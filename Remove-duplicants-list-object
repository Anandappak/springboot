unique object set 
ex: 1
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Main {
    public static void main(String[] args) {
        List<MyObject> objects = new ArrayList<>();
        // Populate your objects list here
        
        List<MyObject> uniqueObjects = removeDuplicates(objects);
        
        // Now uniqueObjects contains only unique objects based on their ID
    }
    
    public static List<MyObject> removeDuplicates(List<MyObject> objects) {
        Set<Integer> seenIds = new HashSet<>();
        List<MyObject> uniqueObjects = new ArrayList<>();
        
        for (MyObject obj : objects) {
            if (seenIds.add(obj.getId())) {
                uniqueObjects.add(obj);
            }
        }
        
        return uniqueObjects;
    }
}

class MyObject {
    private int id;
    private String name;
    private String address;
    
    // Constructor, getters, and setters
}
Ex :2
import java.util.*;

public class Main {
    public static void main(String[] args) {
        List<MyObject> list = new ArrayList<>();
        list.add(new MyObject(1, "John", "123 Main St"));
        list.add(new MyObject(2, "Jane", "456 Elm St"));
        list.add(new MyObject(1, "Doe", "789 Oak St")); // Duplicate ID

        Map<Integer, MyObject> map = new HashMap<>();
        for (MyObject obj : list) {
            map.put(obj.getId(), obj);
        }

        Collection<MyObject> uniqueObjects = map.values();

        // Print unique objects
        for (MyObject obj : uniqueObjects) {
            System.out.println(obj);
        }
    }
}

class MyObject {
    private int id;
    private String name;
    private String address;

    public MyObject(int id, String name, String address) {
        this.id = id;
        this.name = name;
        this.address = address;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getAddress() {
        return address;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Address: " + address;
    }
}
ex :3
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

class ObjectParameter {
    private int id;
    private String name;
    private String address;

    public ObjectParameter(int id, String name, String address) {
        this.id = id;
        this.name = name;
        this.address = address;
    }

    // Getters and setters
    // Depending on your IDE or using Lombok, you may generate these automatically
    // For simplicity, I'm not including them here

    // Override equals and hashCode methods based on ID for HashSet or HashMap
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ObjectParameter that = (ObjectParameter) o;
        return id == that.id;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
}

public class Main {
    public static void main(String[] args) {
        List<ObjectParameter> objects = new ArrayList<>();
        // Add objects to the list

        // To make objects unique based on ID, use a HashSet
        Set<ObjectParameter> uniqueObjects = new HashSet<>(objects);

        // If you want to maintain the order, you can use a LinkedHashMap
        // Map<Integer, ObjectParameter> uniqueObjectsMap = new LinkedHashMap<>();
        // for (ObjectParameter obj : objects) {
        //     uniqueObjectsMap.putIfAbsent(obj.getId(), obj);
        // }
    }
}

