step 1 read csv file

CSVReader reader = new CSVReader(new FileReader("path/to/your/input.csv"));
List<String[]> csvData = reader.readAll();

step 2 process and fetch detabase data 
for (String[] row : csvData) {
   // Process each row and fetch additional data from the database
   String csvColumn = row[0];
   YourEntity entity = yourEntityRepository.findByColumn(csvColumn);
   // Perform processing and database fetching as needed
}

step 3 write a csv file 

CSVWriter writer = new CSVWriter(new FileWriter("path/to/your/output.csv"));
// Write processed data to the new CSV file
writer.writeAll(processedData);
writer.close();

step 4 Creat a rest api

@RestController
@RequestMapping("/api/csv")
public class CsvProcessingController {

   @Autowired
   private YourEntityRepository yourEntityRepository;

   @PostMapping("/process")
   public ResponseEntity<String> processCsvData() {
      try {
         // Read, process, fetch from the database, and write to a new CSV file
         // Implement the steps mentioned above

         return ResponseEntity.ok("CSV data processed successfully");
      } catch (Exception e) {
         return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
               .body("Error processing CSV data: " + e.getMessage());
      }
   }
}



second logic

step 1 read a database from database table
@Service
public class DataService {

   @Autowired
   private YourEntityRepository entityRepository;

   public List<YourEntity> fetchDataFromDatabase() {
      // Use your repository to fetch data from the database
      return entityRepository.findAll();
   }
}

step 2 process data
@Service
public class DataProcessingService {

   public List<String> process(List<YourEntity> data) {
      // Perform your data processing here
      // For example, convert entities to strings
      return data.stream()
            .map(entity -> entity.getField1() + "," + entity.getField2())
            .collect(Collectors.toList());
   }
}

step 3 write csv 
@Service
public class CsvWriterService {

   public void writeToCsv(List<String> processedData, String filePath) {
      try (PrintWriter writer = new PrintWriter(filePath)) {
         processedData.forEach(writer::println);
      } catch (FileNotFoundException e) {
         // Handle exception
      }
   }
}


step 4 controller
@RestController
@RequestMapping("/api")
public class DataController {

   @Autowired
   private DataService dataService;

   @Autowired
   private DataProcessingService processingService;

   @Autowired
   private CsvWriterService csvWriterService;

   @GetMapping("/processAndWriteToCsv")
   public ResponseEntity<String> processAndWriteToCsv(@RequestParam String filePath) {
      // Fetch data from the database
      List<YourEntity> data = dataService.fetchDataFromDatabase();

      // Process the data
      List<String> processedData = processingService.process(data);

      // Write to CSV
      csvWriterService.writeToCsv(processedData, filePath);

      return ResponseEntity.ok("Data processed and written to CSV successfully");
   }
}

