import java.time.LocalDate;
import java.time.ZoneOffset;

public class LocalDateToTimestamp {
    public static void main(String[] args) {
        // Get the current local date
        LocalDate localDate = LocalDate.now();

        // Convert local date to timestamp integer value (seconds since Unix epoch)
        long timestamp = localDate.atStartOfDay(ZoneOffset.UTC).toEpochSecond();

        System.out.println("Local Date: " + localDate);
        System.out.println("Timestamp: " + timestamp);
    }
}


date filter
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class DateFilter {
    public static void main(String[] args) {
        // Sample list of dates
        List<LocalDate> dateList = new ArrayList<>();
        dateList.add(LocalDate.of(2024, 2, 1));
        dateList.add(LocalDate.of(2024, 2, 10));
        dateList.add(LocalDate.of(2024, 2, 15));
        dateList.add(LocalDate.of(2024, 2, 20));
        dateList.add(LocalDate.of(2024, 2, 25));
        
        // Define start and end dates for filtering
        LocalDate startDate = LocalDate.of(2024, 2, 5);
        LocalDate endDate = LocalDate.of(2024, 2, 20);
        
        // Filter dates between start and end dates
        List<LocalDate> filteredDates = new ArrayList<>();
        for (LocalDate date : dateList) {
            if (date.isAfter(startDate) && date.isBefore(endDate)) {
                filteredDates.add(date);
            }
        }
        
        // Output filtered dates
        System.out.println("Filtered dates between " + startDate + " and " + endDate + ":");
        for (LocalDate date : filteredDates) {
            System.out.println(date);
        }
    }
}
new logic added
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class JsonDataFilter {

    public static void main(String[] args) {
        String jsonData = "[{\"id\": 1, \"created_date\": \"2024-02-10\"}, {\"id\": 2, \"created_date\": \"2024-02-15\"}, {\"id\": 3, \"created_date\": \"2024-02-20\"}]";

        ObjectMapper mapper = new ObjectMapper();
        try {
            JsonNode rootNode = mapper.readTree(jsonData);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date startDate = sdf.parse("2024-02-10");
            Date endDate = sdf.parse("2024-02-19");

            for (JsonNode node : rootNode) {
                String dateString = node.get("created_date").asText();
                Date createdDate = sdf.parse(dateString);

                if (createdDate.after(startDate) && createdDate.before(endDate)) {
                    // Within the range, do something with the node
                    System.out.println(node);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

timestamp to GMT date
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

public class TimestampToGMTDate {
    public static void main(String[] args) {
        // Assuming you have a timestamp in milliseconds
        long timestampInMillis = 1626000000000L; // Replace with your timestamp
        
        // Convert timestamp to LocalDateTime in GMT
        LocalDateTime dateTime = LocalDateTime.ofInstant(
                Instant.ofEpochMilli(timestampInMillis),
                ZoneId.of("GMT")
        );
        
        // Formatting LocalDateTime if needed
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedDateTime = dateTime.format(formatter);
        
        // Print the formatted date and time
        System.out.println("GMT Date and Time: " + formattedDateTime);
    }
}

timestamp to IST 
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

public class TimestampToISTDate {
    public static void main(String[] args) {
        // Assuming you have a timestamp in milliseconds
        long timestampInMillis = 1626000000000L; // Replace with your timestamp
        
        // Convert timestamp to LocalDateTime in IST
        LocalDateTime dateTime = LocalDateTime.ofInstant(
                Instant.ofEpochMilli(timestampInMillis),
                ZoneId.of("Asia/Kolkata")
        );
        
        // Formatting LocalDateTime if needed
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedDateTime = dateTime.format(formatter);
        
        // Print the formatted date and time
        System.out.println("IST Date and Time: " + formattedDateTime);
    }
}
GMT date to IST date
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

public class GMTToISTDate {
    public static void main(String[] args) {
        // Assuming you have a date-time string in GMT
        String gmtDateTimeString = "2023-07-11T12:00:00"; // Replace with your date-time string

        // Parse the GMT date-time string to LocalDateTime
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss");
        LocalDateTime gmtDateTime = LocalDateTime.parse(gmtDateTimeString, formatter);
        
        // Convert LocalDateTime in GMT to ZonedDateTime in GMT
        ZonedDateTime gmtZonedDateTime = gmtDateTime.atZone(ZoneId.of("GMT"));
        
        // Convert GMT ZonedDateTime to IST ZonedDateTime
        ZonedDateTime istZonedDateTime = gmtZonedDateTime.withZoneSameInstant(ZoneId.of("Asia/Kolkata"));
        
        // Format the IST date-time if needed
        String formattedISTDateTime = istZonedDateTime.format(formatter);
        
        // Print the formatted IST date and time
        System.out.println("IST Date and Time: " + formattedISTDateTime);
    }
}

IST date to GMT Date
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

public class ISTToGMTDate {
    public static void main(String[] args) {
        // Assuming you have a date-time string in IST
        String istDateTimeString = "2023-07-11T12:00:00"; // Replace with your date-time string

        // Parse the IST date-time string to LocalDateTime
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss");
        LocalDateTime istDateTime = LocalDateTime.parse(istDateTimeString, formatter);
        
        // Convert LocalDateTime in IST to ZonedDateTime in IST
        ZonedDateTime istZonedDateTime = istDateTime.atZone(ZoneId.of("Asia/Kolkata"));
        
        // Convert IST ZonedDateTime to GMT ZonedDateTime
        ZonedDateTime gmtZonedDateTime = istZonedDateTime.withZoneSameInstant(ZoneId.of("GMT"));
        
        // Format the GMT date-time if needed
        String formattedGMTDateTime = gmtZonedDateTime.format(formatter);
        
        // Print the formatted GMT date and time
        System.out.println("GMT Date and Time: " + formattedGMTDateTime);
    }
}

