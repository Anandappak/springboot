ok https
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import java.io.File;
import java.io.IOException;
import java.security.GeneralSecurityException;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import okhttp3.OkHttpClient;

public class Main {
    public static void main(String[] args) throws IOException {
        OkHttpClient client = getCustomOkHttpClient();
        
        Request request = new Request.Builder()
            .url("https://example.com")
            .build();

        try (Response response = client.newCall(request).execute()) {
            System.out.println(response.body().string());
        }
    }

    private static OkHttpClient getCustomOkHttpClient() {
        try {
            // Load client.pem and client.crt
            File clientPemFile = new File("/path/to/client.pem");
            File clientCrtFile = new File("/path/to/client.crt");
            
            // Load chaining trust cert
            File chainingTrustCertFile = new File("/path/to/chaining_trust_cert.crt");

            // Create a TrustManager that trusts the chaining trust cert
            TrustManager[] trustManagers = {new CustomTrustManager(chainingTrustCertFile)};

            // Create an SSLContext that uses the custom TrustManager
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, trustManagers, null);

            // Create OkHttpClient with custom SSLContext
            return new OkHttpClient.Builder()
                    .sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustManagers[0])
                    .build();
        } catch (GeneralSecurityException e) {
            throw new RuntimeException(e);
        }
    }

    private static class CustomTrustManager implements X509TrustManager {
        private final X509TrustManager defaultTrustManager;

        public CustomTrustManager(File chainingTrustCertFile) throws GeneralSecurityException {
            defaultTrustManager = TrustManagerUtils.getTrustManager(chainingTrustCertFile);
        }

        @Override
        public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws java.security.cert.CertificateException {
            defaultTrustManager.checkClientTrusted(chain, authType);
        }

        @Override
        public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws java.security.cert.CertificateException {
            defaultTrustManager.checkServerTrusted(chain, authType);
        }

        @Override
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return defaultTrustManager.getAcceptedIssuers();
        }
    }
}
