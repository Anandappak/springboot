ok https
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import java.io.File;
import java.io.IOException;
import java.security.GeneralSecurityException;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import okhttp3.OkHttpClient;

public class Main {
    public static void main(String[] args) throws IOException {
        OkHttpClient client = getCustomOkHttpClient();
        
        Request request = new Request.Builder()
            .url("https://example.com")
            .build();

        try (Response response = client.newCall(request).execute()) {
            System.out.println(response.body().string());
        }
    }

    private static OkHttpClient getCustomOkHttpClient() {
        try {
            // Load client.pem and client.crt
            File clientPemFile = new File("/path/to/client.pem");
            File clientCrtFile = new File("/path/to/client.crt");
            
            // Load chaining trust cert
            File chainingTrustCertFile = new File("/path/to/chaining_trust_cert.crt");

            // Create a TrustManager that trusts the chaining trust cert
            TrustManager[] trustManagers = {new CustomTrustManager(chainingTrustCertFile)};

            // Create an SSLContext that uses the custom TrustManager
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, trustManagers, null);

            // Create OkHttpClient with custom SSLContext
            return new OkHttpClient.Builder()
                    .sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustManagers[0])
                    .build();
        } catch (GeneralSecurityException e) {
            throw new RuntimeException(e);
        }
    }

    private static class CustomTrustManager implements X509TrustManager {
        private final X509TrustManager defaultTrustManager;

        public CustomTrustManager(File chainingTrustCertFile) throws GeneralSecurityException {
            defaultTrustManager = TrustManagerUtils.getTrustManager(chainingTrustCertFile);
        }

        @Override
        public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws java.security.cert.CertificateException {
            defaultTrustManager.checkClientTrusted(chain, authType);
        }

        @Override
        public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws java.security.cert.CertificateException {
            defaultTrustManager.checkServerTrusted(chain, authType);
        }

        @Override
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return defaultTrustManager.getAcceptedIssuers();
        }
    }
}




2nd ex
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import java.io.File;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.cert.CertificateFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

public class Main {
    public static void main(String[] args) throws IOException {
        OkHttpClient client = getCustomOkHttpClient();
        
        Request request = new Request.Builder()
            .url("https://example.com")
            .build();

        try (Response response = client.newCall(request).execute()) {
            System.out.println(response.body().string());
        }
    }

    private static OkHttpClient getCustomOkHttpClient() {
        try {
            // Load client.pem and client.key
            File clientCertFile = new File("/path/to/client.pem");
            File clientKeyFile = new File("/path/to/client.key");
            
            // Load chaining trust cert
            File chainingTrustCertFile = new File("/path/to/chaining_trust.pem");

            // Create a KeyStore for client certificate and key
            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            keyStore.load(null, null);
            CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
            keyStore.setCertificateEntry("client", certificateFactory.generateCertificate(clientCertFile));
            keyStore.setKeyEntry("key", KeyUtil.loadPrivateKey(clientKeyFile), new char[0], new java.security.cert.Certificate[]{});

            // Create a TrustManagerFactory for the chaining trust cert
            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            trustManagerFactory.init(KeyStoreUtil.createKeyStore(chainingTrustCertFile));

            // Create an SSLContext that uses the custom KeyStore and TrustManagerFactory
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(KeyUtil.getKeyManagers(keyStore), trustManagerFactory.getTrustManagers(), null);

            // Create OkHttpClient with custom SSLContext
            return new OkHttpClient.Builder()
                    .sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustManagerFactory.getTrustManagers()[0])
                    .build();
        } catch (GeneralSecurityException | IOException e) {
            throw new RuntimeException(e);
        }
    }
}



new ex working
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManagerFactory;
import java.io.File;
import java.io.FileInputStream;
import java.security.KeyStore;

public class SSLExample {
    public static void main(String[] args) throws Exception {
        // Load certificate and key files
        File certFile = new File("cert.pem");
        File keyFile = new File("key.pem");
        File chainFile = new File("chaining.pem");

        // Load certificate chain
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(null, null);
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        try (FileInputStream fis = new FileInputStream(chainFile)) {
            Collection<? extends Certificate> certificates = cf.generateCertificates(fis);
            int index = 0;
            for (Certificate certificate : certificates) {
                keyStore.setCertificateEntry("cert" + index++, certificate);
            }
        }

        // Load private key and certificate into key store
        KeyFactory kf = KeyFactory.getInstance("RSA");
        try (FileInputStream fis = new FileInputStream(certFile)) {
            X509Certificate cert = (X509Certificate) cf.generateCertificate(fis);
            keyStore.setCertificateEntry("cert", cert);
        }
        try (FileInputStream fis = new FileInputStream(keyFile)) {
            PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(fis.readAllBytes());
            PrivateKey privateKey = kf.generatePrivate(spec);
            keyStore.setKeyEntry("key", privateKey, "".toCharArray(), new Certificate[]{});
        }

        // Create trust manager factory
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(
                TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(keyStore);

        // Create SSL context
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, trustManagerFactory.getTrustManagers(), null);

        // Create SSLSocketFactory
        SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

        // Create OkHttpClient
        OkHttpClient client = new OkHttpClient.Builder()
                .sslSocketFactory(sslSocketFactory, trustManagerFactory.getTrustManagers()[0])
                .build();

        // Example request
        Request request = new Request.Builder()
                .url("https://example.com")
                .build();

        // Execute request
        try (Response response = client.newCall(request).execute()) {
            System.out.println(response.body().string());
        }
    }
}
new updated code
import okhttp3.OkHttpClient;
import okhttp3.CertificatePinner;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import java.security.KeyStore;
import java.security.cert.CertificateFactory;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.io.InputStream;
import java.io.BufferedInputStream;

public class MyHttpClient {

    public OkHttpClient getHttpClient() {
        try {
            // Load certificate from file
            InputStream certInputStream = new BufferedInputStream(new FileInputStream("cert.pem"));
            CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
            X509Certificate cert = (X509Certificate) certFactory.generateCertificate(certInputStream);
            
            // Load chaining certificate from file
            InputStream chainingInputStream = new BufferedInputStream(new FileInputStream("chaining.pem"));
            X509Certificate chainingCert = (X509Certificate) certFactory.generateCertificate(chainingInputStream);
            
            // Load private key from file (if needed)
            // KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            // InputStream keyInputStream = new BufferedInputStream(new FileInputStream("key.pem"));
            // keyStore.load(keyInputStream, "password".toCharArray());

            // Create a TrustManager that trusts the certificates
            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
            trustStore.load(null, null);
            trustStore.setCertificateEntry("cert", cert);
            trustStore.setCertificateEntry("chaining", chainingCert);
            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            trustManagerFactory.init(trustStore);

            // Create an SSLContext that uses our TrustManager
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, trustManagerFactory.getTrustManagers(), null);

            // Configure OkHttpClient to use the SSLContext
            OkHttpClient.Builder builder = new OkHttpClient.Builder();
            builder.sslSocketFactory(sslContext.getSocketFactory(), trustManagerFactory);
            builder.hostnameVerifier((hostname, session) -> true); // Replace with proper hostname verification

            // You can also add certificate pinning if needed
            // builder.certificatePinner(new CertificatePinner.Builder().add("example.com", "sha256/encoded_hash").build());

            return builder.build();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}

