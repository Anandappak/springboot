ok https
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import java.io.File;
import java.io.IOException;
import java.security.GeneralSecurityException;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import okhttp3.OkHttpClient;

public class Main {
    public static void main(String[] args) throws IOException {
        OkHttpClient client = getCustomOkHttpClient();
        
        Request request = new Request.Builder()
            .url("https://example.com")
            .build();

        try (Response response = client.newCall(request).execute()) {
            System.out.println(response.body().string());
        }
    }

    private static OkHttpClient getCustomOkHttpClient() {
        try {
            // Load client.pem and client.crt
            File clientPemFile = new File("/path/to/client.pem");
            File clientCrtFile = new File("/path/to/client.crt");
            
            // Load chaining trust cert
            File chainingTrustCertFile = new File("/path/to/chaining_trust_cert.crt");

            // Create a TrustManager that trusts the chaining trust cert
            TrustManager[] trustManagers = {new CustomTrustManager(chainingTrustCertFile)};

            // Create an SSLContext that uses the custom TrustManager
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, trustManagers, null);

            // Create OkHttpClient with custom SSLContext
            return new OkHttpClient.Builder()
                    .sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustManagers[0])
                    .build();
        } catch (GeneralSecurityException e) {
            throw new RuntimeException(e);
        }
    }

    private static class CustomTrustManager implements X509TrustManager {
        private final X509TrustManager defaultTrustManager;

        public CustomTrustManager(File chainingTrustCertFile) throws GeneralSecurityException {
            defaultTrustManager = TrustManagerUtils.getTrustManager(chainingTrustCertFile);
        }

        @Override
        public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws java.security.cert.CertificateException {
            defaultTrustManager.checkClientTrusted(chain, authType);
        }

        @Override
        public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws java.security.cert.CertificateException {
            defaultTrustManager.checkServerTrusted(chain, authType);
        }

        @Override
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return defaultTrustManager.getAcceptedIssuers();
        }
    }
}




2nd ex
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import java.io.File;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.cert.CertificateFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

public class Main {
    public static void main(String[] args) throws IOException {
        OkHttpClient client = getCustomOkHttpClient();
        
        Request request = new Request.Builder()
            .url("https://example.com")
            .build();

        try (Response response = client.newCall(request).execute()) {
            System.out.println(response.body().string());
        }
    }

    private static OkHttpClient getCustomOkHttpClient() {
        try {
            // Load client.pem and client.key
            File clientCertFile = new File("/path/to/client.pem");
            File clientKeyFile = new File("/path/to/client.key");
            
            // Load chaining trust cert
            File chainingTrustCertFile = new File("/path/to/chaining_trust.pem");

            // Create a KeyStore for client certificate and key
            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            keyStore.load(null, null);
            CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
            keyStore.setCertificateEntry("client", certificateFactory.generateCertificate(clientCertFile));
            keyStore.setKeyEntry("key", KeyUtil.loadPrivateKey(clientKeyFile), new char[0], new java.security.cert.Certificate[]{});

            // Create a TrustManagerFactory for the chaining trust cert
            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            trustManagerFactory.init(KeyStoreUtil.createKeyStore(chainingTrustCertFile));

            // Create an SSLContext that uses the custom KeyStore and TrustManagerFactory
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(KeyUtil.getKeyManagers(keyStore), trustManagerFactory.getTrustManagers(), null);

            // Create OkHttpClient with custom SSLContext
            return new OkHttpClient.Builder()
                    .sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustManagerFactory.getTrustManagers()[0])
                    .build();
        } catch (GeneralSecurityException | IOException e) {
            throw new RuntimeException(e);
        }
    }
}



new ex working
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManagerFactory;
import java.io.File;
import java.io.FileInputStream;
import java.security.KeyStore;

public class SSLExample {
    public static void main(String[] args) throws Exception {
        // Load certificate and key files
        File certFile = new File("cert.pem");
        File keyFile = new File("key.pem");
        File chainFile = new File("chaining.pem");

        // Load certificate chain
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(null, null);
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        try (FileInputStream fis = new FileInputStream(chainFile)) {
            Collection<? extends Certificate> certificates = cf.generateCertificates(fis);
            int index = 0;
            for (Certificate certificate : certificates) {
                keyStore.setCertificateEntry("cert" + index++, certificate);
            }
        }

        // Load private key and certificate into key store
        KeyFactory kf = KeyFactory.getInstance("RSA");
        try (FileInputStream fis = new FileInputStream(certFile)) {
            X509Certificate cert = (X509Certificate) cf.generateCertificate(fis);
            keyStore.setCertificateEntry("cert", cert);
        }
        try (FileInputStream fis = new FileInputStream(keyFile)) {
            PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(fis.readAllBytes());
            PrivateKey privateKey = kf.generatePrivate(spec);
            keyStore.setKeyEntry("key", privateKey, "".toCharArray(), new Certificate[]{});
        }

        // Create trust manager factory
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(
                TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(keyStore);

        // Create SSL context
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, trustManagerFactory.getTrustManagers(), null);

        // Create SSLSocketFactory
        SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

        // Create OkHttpClient
        OkHttpClient client = new OkHttpClient.Builder()
                .sslSocketFactory(sslSocketFactory, trustManagerFactory.getTrustManagers()[0])
                .build();

        // Example request
        Request request = new Request.Builder()
                .url("https://example.com")
                .build();

        // Execute request
        try (Response response = client.newCall(request).execute()) {
            System.out.println(response.body().string());
        }
    }
}
new updated code
import okhttp3.OkHttpClient;
import okhttp3.CertificatePinner;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import java.security.KeyStore;
import java.security.cert.CertificateFactory;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.io.InputStream;
import java.io.BufferedInputStream;

public class MyHttpClient {

    public OkHttpClient getHttpClient() {
        try {
            // Load certificate from file
            InputStream certInputStream = new BufferedInputStream(new FileInputStream("cert.pem"));
            CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
            X509Certificate cert = (X509Certificate) certFactory.generateCertificate(certInputStream);
            
            // Load chaining certificate from file
            InputStream chainingInputStream = new BufferedInputStream(new FileInputStream("chaining.pem"));
            X509Certificate chainingCert = (X509Certificate) certFactory.generateCertificate(chainingInputStream);
            
            // Load private key from file (if needed)
            // KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            // InputStream keyInputStream = new BufferedInputStream(new FileInputStream("key.pem"));
            // keyStore.load(keyInputStream, "password".toCharArray());

            // Create a TrustManager that trusts the certificates
            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
            trustStore.load(null, null);
            trustStore.setCertificateEntry("cert", cert);
            trustStore.setCertificateEntry("chaining", chainingCert);
            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            trustManagerFactory.init(trustStore);

            // Create an SSLContext that uses our TrustManager
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, trustManagerFactory.getTrustManagers(), null);

            // Configure OkHttpClient to use the SSLContext
            OkHttpClient.Builder builder = new OkHttpClient.Builder();
            builder.sslSocketFactory(sslContext.getSocketFactory(), trustManagerFactory);
            builder.hostnameVerifier((hostname, session) -> true); // Replace with proper hostname verification

            // You can also add certificate pinning if needed
            // builder.certificatePinner(new CertificatePinner.Builder().add("example.com", "sha256/encoded_hash").build());

            return builder.build();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}

new ex ssl adedd

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.CertificatePinner;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLSocketFactory;
import java.security.KeyStore;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.io.InputStream;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.io.FileInputStream;
import java.io.IOException;

public class OkHttpExample {
    public static void main(String[] args) {
        try {
            OkHttpClient client = getOkHttpClient();
            
            Request request = new Request.Builder()
                .url("https://your-server.com")
                .build();
                
            Response response = client.newCall(request).execute();
            System.out.println(response.body().string());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static OkHttpClient getOkHttpClient() throws IOException {
        // Load CA certificate
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        InputStream caInput = new FileInputStream("ca.crt");
        X509Certificate caCert = (X509Certificate) cf.generateCertificate(caInput);
        caInput.close();

        // Load server certificate
        InputStream certInput = new FileInputStream("server.crt");
        X509Certificate serverCert = (X509Certificate) cf.generateCertificate(certInput);
        certInput.close();

        // Load server key
        InputStream keyInput = new FileInputStream("server.key");
        KeyStore keyStore = KeyStore.getInstance("PKCS12");
        keyStore.load(keyInput, "password".toCharArray());
        keyInput.close();

        // TrustManagerFactory for CA certificate
        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init((KeyStore) null);
        tmf.getTrustManagers();

        // KeyManagerFactory for server key
        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        kmf.init(keyStore, "password".toCharArray());

        // Create SSLContext
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);

        // Configure OkHttp client
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        builder.sslSocketFactory(sslContext.getSocketFactory());
        builder.hostnameVerifier((hostname, session) -> true); // You might want to change this to a proper hostname verifier
        return builder.build();
    }
}

new code
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLSocketFactory;
import java.io.FileInputStream;
import java.security.KeyStore;

public class OkHttpClientExample {
    public static void main(String[] args) throws Exception {
        // Load CA certificate
        FileInputStream caInput = new FileInputStream("path/to/ca.crt");
        KeyStore caKeyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        caKeyStore.load(caInput, "password".toCharArray());
        
        // Load server certificate
        FileInputStream certInput = new FileInputStream("path/to/server.cert");
        KeyStore certKeyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        certKeyStore.load(certInput, "password".toCharArray());

        // Load server private key
        FileInputStream keyInput = new FileInputStream("path/to/server.key");
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(keyInput, "password".toCharArray());

        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(caKeyStore);

        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        kmf.init(keyStore, "password".toCharArray());

        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);

        SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

        OkHttpClient client = new OkHttpClient.Builder()
                .sslSocketFactory(sslSocketFactory, tmf.getTrustManagers()[0])
                .build();

        Request request = new Request.Builder()
                .url("https://example.com")
                .build();

        Response response = client.newCall(request).execute();
        System.out.println(response.body().string());
    }
}


new code 3
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLSocketFactory;
import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

public class OkHttpClientExample {
    public static void main(String[] args) throws Exception {
        // Load chain-of-trust.pem file
        CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
        FileInputStream chainInput = new FileInputStream("path/to/chain-of-trust.pem");
        X509Certificate caCert = (X509Certificate) certificateFactory.generateCertificate(chainInput);
        
        // Load server certificate
        FileInputStream certInput = new FileInputStream("path/to/server.crt");
        X509Certificate serverCert = (X509Certificate) certificateFactory.generateCertificate(certInput);

        // Load server private key
        FileInputStream keyInput = new FileInputStream("path/to/server.key");
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(null, null);
        keyStore.setCertificateEntry("caCert", caCert);
        keyStore.setCertificateEntry("serverCert", serverCert);

        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(keyStore);

        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        kmf.init(keyStore, "password".toCharArray());

        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);

        SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

        OkHttpClient client = new OkHttpClient.Builder()
                .sslSocketFactory(sslSocketFactory, tmf.getTrustManagers()[0])
                .build();

        Request request = new Request.Builder()
                .url("https://example.com")
                .build();

        Response response = client.newCall(request).execute();
        System.out.println(response.body().string());
    }
}
no ssl certificate error

import javax.net.ssl.*;

public class SSLConfig {
    public static SSLSocketFactory getSSLSocketFactory() throws Exception {
        // Create a TrustManager that trusts the server's certificate
        TrustManager[] trustAllCerts = new TrustManager[]{
            new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return new java.security.cert.X509Certificate[]{};
                }
                public void checkClientTrusted(
                    java.security.cert.X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(
                    java.security.cert.X509Certificate[] certs, String authType) {
                }
            }
        };
        
        // Create an SSLContext that uses our TrustManager
        SSLContext sslContext = SSLContext.getInstance("SSL");
        sslContext.init(null, trustAllCerts, new java.security.SecureRandom());
        
        // Get the SSLSocketFactory from the SSLContext
        return sslContext.getSocketFactory();
    }
}
import okhttp3.OkHttpClient;

public class Main {
    public static void main(String[] args) {
        try {
            OkHttpClient client = new OkHttpClient.Builder()
                .sslSocketFactory(SSLConfig.getSSLSocketFactory())
                .hostnameVerifier((hostname, session) -> true)
                .build();
                
            // Proceed with your OkHttpClient setup and request here
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


new cose error ssl
import okhttp3.*;

import javax.net.ssl.*;
import java.io.File;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

public class Main {
    public static void main(String[] args) throws IOException, GeneralSecurityException {
        // Load client certificate and key
        File certFile = new File("chain-of-trud.pem"); // Replace with your client certificate file
        File keyFile = new File("server.key"); // Replace with your client private key file

        // Load CA certificate
        File caFile = new File("server.crt"); // Replace with your CA certificate file

        OkHttpClient client = createClient(certFile, keyFile, caFile);

        // Proceed with your OkHttpClient setup and request here
    }

    private static OkHttpClient createClient(File certFile, File keyFile, File caFile)
            throws IOException, GeneralSecurityException {
        // Load client certificate and key into KeyStore
        KeyStore clientKeyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        clientKeyStore.load(null, null); // Initialize an empty KeyStore
        X509Certificate clientCert = loadCertificate(certFile);
        clientKeyStore.setCertificateEntry("client", clientCert);

        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
        trustStore.load(null, null); // Initialize an empty KeyStore
        X509Certificate caCert = loadCertificate(caFile);
        trustStore.setCertificateEntry("ca", caCert);

        // Initialize KeyManagerFactory with client certificate
        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(
                KeyManagerFactory.getDefaultAlgorithm());
        keyManagerFactory.init(clientKeyStore, null);

        // Initialize TrustManagerFactory with CA certificate
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(
                TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(trustStore);

        // Initialize SSLContext
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(keyManagerFactory.getKeyManagers(),
                trustManagerFactory.getTrustManagers(), null);

        // Build OkHttpClient with SSLContext
        return new OkHttpClient.Builder()
                .sslSocketFactory(sslContext.getSocketFactory(),
                        (X509TrustManager) trustManagerFactory.getTrustManagers()[0])
                .build();
    }

    private static X509Certificate loadCertificate(File file) throws IOException, GeneralSecurityException {
        CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
        return (X509Certificate) certificateFactory.generateCertificate(file.toURI().toURL().openStream());
    }
}

custome ssl certificate 
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;

public class CustomHttpClient {

    public static HttpClient createCustomHttpClient() throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException {
        // Create a trust manager that trusts all certificates
        TrustManager[] trustAllCertificates = new TrustManager[] {
            new X509TrustManager() {
                @Override
                public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                }

                @Override
                public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                }

                @Override
                public X509Certificate[] getAcceptedIssuers() {
                    return null;
                }
            }
        };

        // Create SSLContext with the trust manager
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, trustAllCertificates, null);

        // Build a custom HttpClient with the custom SSLContext
        return HttpClients.custom()
                .setSSLContext(sslContext)
                .build();
    }

    public static void main(String[] args) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException {
        HttpClient httpClient = createCustomHttpClient();
        // Use the custom HttpClient for making requests
        // Example:
        // HttpGet httpGet = new HttpGet("https://example.com");
        // HttpResponse response = httpClient.execute(httpGet);
    }
}
convert to jks formate and try and try 
import okhttp3.*;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

public class OkHttpWithSSL {
    public static void main(String[] args) {
        OkHttpClient okHttpClient = createCustomOkHttpClient();

        // Replace with your API endpoint
        String url = "https://your_api_endpoint";

        // Replace with your file path
        File file = new File("path/to/your/file");

        // Create request body
        RequestBody requestBody = new MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("file", file.getName(),
                        RequestBody.create(MediaType.parse("application/octet-stream"), file))
                .build();

        // Create POST request
        Request request = new Request.Builder()
                .url(url)
                .post(requestBody)
                .build();

        try {
            // Execute the request
            Response response = okHttpClient.newCall(request).execute();

            // Handle the response
            if (response.isSuccessful()) {
                System.out.println("Request successful!");
                System.out.println("Response: " + response.body().string());
            } else {
                System.out.println("Request failed!");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static OkHttpClient createCustomOkHttpClient() {
        try {
            // Load your SSL certificates
            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            try (FileInputStream in = new FileInputStream("path/to/your/truststore.jks")) {
                keyStore.load(in, "your_truststore_password".toCharArray());
            }

            // Create a TrustManager that trusts all certificates
            TrustManager[] trustAllCerts = new TrustManager[]{
                    new X509TrustManager() {
                        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                        }

                        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                        }

                        public X509Certificate[] getAcceptedIssuers() {
                            return new X509Certificate[0];
                        }
                    }
            };

            // Create SSLContext with the custom TrustManager and your KeyStore
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, trustAllCerts, new SecureRandom());

            // Create OkHttpClient with custom SSLContext
            OkHttpClient.Builder builder = new OkHttpClient.Builder();
            builder.sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustAllCerts[0]);

            return builder.build();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
